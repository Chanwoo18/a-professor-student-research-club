{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1hVvm9hWtUlCENab3SNIX_ykMgClztL2H","timestamp":1672294244814}],"mount_file_id":"1hVvm9hWtUlCENab3SNIX_ykMgClztL2H","authorship_tag":"ABX9TyOdv4cysUwPE12sljGEbeX3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g3bK5MoAPHpe","executionInfo":{"status":"ok","timestamp":1672637327470,"user_tz":-540,"elapsed":21567,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"d1c3b679-6c2b-4c5b-9f9a-dae9d1e74f00"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["cd /content/drive/MyDrive/deep_lab/GRCNN"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PU6cB6iiPLho","executionInfo":{"status":"ok","timestamp":1672637328347,"user_tz":-540,"elapsed":883,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"fb2c2ea3-cd7d-441d-bd6a-2d57141876a6"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/deep_lab/GRCNN\n"]}]},{"cell_type":"code","source":["# net = cv2.dnn.readNet(\"yolov3.weights\", \"yolov3.cfg\")\n","# classes = []\n","# with open(\"coco.names\", \"r\") as f:\n","#     classes = [line.strip() for line in f.readlines()]\n","# layer_names = net.getLayerNames()\n","# output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]\n","# colors = np.random.uniform(0, 255, size=(len(classes), 3))"],"metadata":{"id":"XjmSQFYmZtFA","executionInfo":{"status":"ok","timestamp":1672637328349,"user_tz":-540,"elapsed":7,"user":{"displayName":"리미누","userId":"10960127468446100835"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#이미 만들어진 모델 적용\n","import torch\n","import models.imagenet.GRCNN as grcnn\n","model = grcnn.grcnn55()\n","model.load_state_dict(torch.load('checkpoint_params_grcnn55.pt'))"],"metadata":{"id":"f3xwZpa4eArP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1672637333982,"user_tz":-540,"elapsed":5638,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"4705274f-1901-4756-f8b9-d49a04c87ee7"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","\n","transform = transforms.Compose(\n","    [transforms.ToTensor(),transforms.Resize((256)),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","batch_size = 4\n","\n","# trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n","#                                         download=True, transform=transform)\n","# trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,\n","#                                           shuffle=True, num_workers=2)\n","\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n","                                       download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,\n","                                         shuffle=False, num_workers=2)\n","\n","classes = ('plane', 'car', 'bird', 'cat',\n","           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"],"metadata":{"id":"Zeh9Eqq4b8MD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1672640399215,"user_tz":-540,"elapsed":1350,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"e9e221ea-c9d4-4b61-bdfd-64c04e9e24cd"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# 이미지를 보여주기 위한 함수\n","\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","    plt.show()\n","\n","\n","# 학습용 이미지를 무작위로 가져오기\n","dataiter = iter(testloader)\n","images, labels = next(dataiter)\n","\n","#학습시\n","# 이미지 보여주기\n","# imshow(torchvision.utils.make_grid(images))\n","# # 정답(label) 출력\n","# print(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))\n","\n","#테스트\n","imshow(torchvision.utils.make_grid(images))\n","print('GroundTruth: ', ' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))"],"metadata":{"id":"fQYgW7Ebb8PY","colab":{"base_uri":"https://localhost:8080/","height":154},"executionInfo":{"status":"ok","timestamp":1672640399941,"user_tz":-540,"elapsed":727,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"fc997287-6e50-4715-a215-dff29dc8979a"},"execution_count":78,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["GroundTruth:  cat   ship  ship  plane\n"]}]},{"cell_type":"code","source":["# testimg = \"/content/drive/MyDrive/deep_lab/GRCNN/test_00.jpg\"\n","\n","# outputs = model(testimg)\n","print(images.size())\n","outputs = model(images)"],"metadata":{"id":"Hn6cz_PKb8RT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1672640401374,"user_tz":-540,"elapsed":1438,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"da14faf9-e36b-439d-b554-5afc9180a5e2"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([4, 3, 256, 256])\n"]}]},{"cell_type":"code","source":["model.eval()"],"metadata":{"id":"52CNEOwvGNtd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1672640401374,"user_tz":-540,"elapsed":9,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"cce32df6-ead3-47ce-9c62-c72651ae0b26"},"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GRCNN(\n","  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (relu): ReLU(inplace=True)\n","  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","  (layer1): GRCL(\n","    (bn_f): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu_f): ReLU(inplace=True)\n","    (conv_f): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n","    (bn_g_f): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu_g_f): ReLU(inplace=True)\n","    (conv_g_f): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)\n","    (conv_g_r): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32, bias=False)\n","    (sig): Sigmoid()\n","    (iter_1): Sequential(\n","      (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_1): Sequential(\n","      (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_2): Sequential(\n","      (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_2): Sequential(\n","      (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_3): Sequential(\n","      (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_3): Sequential(\n","      (0): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (d_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu): ReLU(inplace=True)\n","    (d_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    (d_ave): AvgPool2d(kernel_size=(2, 2), stride=2, padding=0)\n","    (d_bn_1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu_1): ReLU(inplace=True)\n","    (d_conv_1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    (d_bn_3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu_3): ReLU(inplace=True)\n","    (d_conv_3): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","    (d_conv_1e): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","  )\n","  (layer2): GRCL(\n","    (bn_f): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu_f): ReLU(inplace=True)\n","    (conv_f): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n","    (bn_g_f): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu_g_f): ReLU(inplace=True)\n","    (conv_g_f): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)\n","    (conv_g_r): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32, bias=False)\n","    (sig): Sigmoid()\n","    (iter_1): Sequential(\n","      (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_1): Sequential(\n","      (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_2): Sequential(\n","      (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_2): Sequential(\n","      (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_3): Sequential(\n","      (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_3): Sequential(\n","      (0): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (d_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu): ReLU(inplace=True)\n","    (d_conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    (d_ave): AvgPool2d(kernel_size=(2, 2), stride=2, padding=0)\n","    (d_bn_1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu_1): ReLU(inplace=True)\n","    (d_conv_1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    (d_bn_3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu_3): ReLU(inplace=True)\n","    (d_conv_3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","    (d_conv_1e): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","  )\n","  (layer3): GRCL(\n","    (bn_f): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu_f): ReLU(inplace=True)\n","    (conv_f): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n","    (bn_g_f): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu_g_f): ReLU(inplace=True)\n","    (conv_g_f): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), groups=32)\n","    (conv_g_r): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), groups=32, bias=False)\n","    (sig): Sigmoid()\n","    (iter_1): Sequential(\n","      (0): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_1): Sequential(\n","      (0): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_2): Sequential(\n","      (0): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_2): Sequential(\n","      (0): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_3): Sequential(\n","      (0): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_3): Sequential(\n","      (0): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_4): Sequential(\n","      (0): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_4): Sequential(\n","      (0): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (d_bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu): ReLU(inplace=True)\n","    (d_conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    (d_ave): AvgPool2d(kernel_size=(2, 2), stride=2, padding=0)\n","    (d_bn_1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu_1): ReLU(inplace=True)\n","    (d_conv_1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    (d_bn_3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (d_relu_3): ReLU(inplace=True)\n","    (d_conv_3): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","    (d_conv_1e): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","  )\n","  (layer4): GRCL(\n","    (bn_f): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu_f): ReLU(inplace=True)\n","    (conv_f): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n","    (bn_g_f): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu_g_f): ReLU(inplace=True)\n","    (conv_g_f): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), groups=32)\n","    (conv_g_r): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1), groups=32, bias=False)\n","    (sig): Sigmoid()\n","    (iter_1): Sequential(\n","      (0): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_1): Sequential(\n","      (0): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_2): Sequential(\n","      (0): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_2): Sequential(\n","      (0): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","    (iter_3): Sequential(\n","      (0): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","      (2): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (4): ReLU(inplace=True)\n","      (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (7): ReLU(inplace=True)\n","      (8): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    )\n","    (iter_g_3): Sequential(\n","      (0): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (1): ReLU(inplace=True)\n","    )\n","  )\n","  (lastact): Sequential(\n","    (0): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (1): ReLU(inplace=True)\n","  )\n","  (avgpool): AvgPool2d(kernel_size=7, stride=7, padding=0)\n","  (classifier): Linear(in_features=2048, out_features=1000, bias=True)\n",")"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'gpu')\n","print(device)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o4hTTR_UnKEM","executionInfo":{"status":"ok","timestamp":1672640401374,"user_tz":-540,"elapsed":8,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"fd42e812-6cb5-4902-e12e-1e7bb38e16a8"},"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda:0\n"]}]},{"cell_type":"code","source":["outputs = model(images)\n","print(outputs)\n","print(outputs.size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tM1oNS8UspRQ","executionInfo":{"status":"ok","timestamp":1672640456570,"user_tz":-540,"elapsed":1256,"user":{"displayName":"리미누","userId":"10960127468446100835"}},"outputId":"76913a24-96af-475a-f239-cb0894821347"},"execution_count":85,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[ 1.1410e+00,  2.7484e-01, -1.6401e+00,  ...,  3.4486e-01,\n","         -4.9146e-01, -1.3510e+00],\n","        [-3.3618e-01,  5.1736e-01, -9.6600e-01,  ...,  4.0893e-01,\n","          3.2797e-04, -1.1488e+00],\n","        [-6.7655e-01,  2.9795e-01, -1.2991e+00,  ...,  4.6572e-01,\n","          1.8476e+00, -4.9990e-01],\n","        [-7.2771e-01,  2.0721e+00,  2.4458e-03,  ...,  3.6037e-01,\n","         -1.3591e+00,  5.2309e-01]], grad_fn=<AddmmBackward0>)\n","torch.Size([4, 1000])\n"]}]},{"cell_type":"code","source":["tf = transforms.ToPILImage()\n","img = tf(outputs)\n","img.show()\n"],"metadata":{"id":"F3VZ9nHcokth","executionInfo":{"status":"ok","timestamp":1672640402814,"user_tz":-540,"elapsed":4,"user":{"displayName":"리미누","userId":"10960127468446100835"}}},"execution_count":83,"outputs":[]},{"cell_type":"code","source":["# from torchvision.utils import save_image\n","\n","# save_image(outputs, './testimgFolder/image_name.png')"],"metadata":{"id":"jUF0yt9ssGYE","executionInfo":{"status":"ok","timestamp":1672639332319,"user_tz":-540,"elapsed":9,"user":{"displayName":"리미누","userId":"10960127468446100835"}}},"execution_count":68,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"--cD0C1MEXyq"},"execution_count":null,"outputs":[]}]}